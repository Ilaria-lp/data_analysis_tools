#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__  = "Ilaria Carlomagno"
__license__ = "MIT"
__version__ = "1.0"
__email__   = "ilaria.carlomagno@elettra.eu"

import math
import matplotlib.pyplot as plt
import numpy as np
import xraylib as xl

Ef = 6.4 # fluorescence of Fe Kalpha (keV)
E0 = 10  # primary Xray energy (keV)

i0 = 2.2e9

abs_jump_fact = 0.9
emission_rate_Kline = xl.RadRate(26, xl.KL3_LINE)
Fe_fluo_yield = xl.FluorYield(26, xl.K_SHELL)

# from the previous three, we get the excitation factor
excit_fact = abs_jump_fact * emission_rate_Kline * Fe_fluo_yield

CS_Fe_E0 = xl.CS_Photo(26, 10)
det_accept = 3*50 / ( 4* (math.pi) *30**2)
det_efficiency = 0.995

expt_constant = i0 * excit_fact * CS_Fe_E0 * det_accept * det_efficiency

# Substrate (steel) composition: Fe, Cr, Ni
SS = {}
SS['el']   = [26, 24, 28] # atomic numbers
SS['comp'] = [70, 20, 10] # molar ratios

# Samples composition: Zr, Ti, V
samples_el = [40, 22, 23] # atomic numbers (Z)
sample = {  'S1_1B':{},
            'S1_5B':{},
            'S2_3B':{},
            'S5_7F':{},
            'S7_2B':{},
            'S7_5F':{} }

# Samples molar ratios of Zr, Ti, V
sample['S1_1B']['el'], sample['S1_1B']['comp'] = samples_el, [20, 35, 45]
sample['S1_5B']['el'], sample['S1_5B']['comp'] = samples_el, [16, 35, 49]
sample['S2_3B']['el'], sample['S2_3B']['comp'] = samples_el, [18, 35, 47]
sample['S5_7F']['el'], sample['S5_7F']['comp'] = samples_el, [21, 34, 45]
sample['S7_2B']['el'], sample['S7_2B']['comp'] = samples_el, [23, 33, 44]
sample['S7_5F']['el'], sample['S7_5F']['comp'] = samples_el, [21, 38, 41]


# here are the experimental data (area of Fe Kalpha emission)
exp_data = {}
exp_inc_angles = [5, 10, 20, 30, 45, 60]
exp_data['data_S1_1B'] = np.multiply([4.17, 4.69, 4.50, 4.05, 3.24, 2.35], 1e5)
exp_data['data_S1_5B'] = np.multiply([2.47, 3.38, 3.60, 3.26, 2.60, 1.78], 1e5)
exp_data['data_S2_3B'] = np.multiply([4.09, 4.63, 4.47, 4.01, 3.22, 2.32], 1e5)
exp_data['data_S5_7F'] = np.multiply([3.52, 4.15, 4.11, 3.73, 2.99, 2.13], 1e5)
exp_data['data_S7_2B'] = np.multiply([5.49, 5.56, 5.08, 4.62, 3.64, 2.70], 1e5)
exp_data['data_S7_5F'] = np.multiply([6.17, 5.99, 5.36, 4.74, 3.83, 2.90], 1e5)


def compound_CS(material, energy):
    print('\tCalculating cross section at ', energy)
    elem_list = material['el']
    mass_fractions = material['mass_fr']

    CS_list = []
    ave_CS = 0
    for el in elem_list:
        CS_list.append(xl.CS_Photo(el, energy)) # returns cross section in cm^2/g)
    
    ave_CS = np.average(CS_list, weights = mass_fractions)
    name = 'CS_' + str(energy)
    material[name] = ave_CS
    return material

def compound_density(material):
    print('\tCalculating density...')
    elem_list = material['el']
    molar_ratios = material['comp']
    density = []
    for el in elem_list:
        density.append(xl.ElementDensity(el))

    comp_density = np.multiply(molar_ratios, density)
    comp_density = np.sum(comp_density)/np.sum(molar_ratios)
    material['density'] = comp_density

    return material

def molar_to_mass_ratio(material):
    print('\tCalculating mass fractions...')
    elem_list = material['el']
    molar_ratios = material['comp']
    mass_fractions = []
    
    denominator = np.multiply(elem_list, molar_ratios)
    denominator = np.sum(denominator)

    for el, i in zip(elem_list, range(len(elem_list))):
        mass_fractions.append( (molar_ratios[i] * xl.AtomicWeight(el)) / denominator )

    material['mass_fr'] = mass_fractions
    return material

def simulate_material(material):
    material = molar_to_mass_ratio(material)
    material = compound_CS(material, E0)  # E0 = incident X-ray energy = 10 keV
    material = compound_CS(material, Ef)  # Ef = energy of the fluo line = 6.4 keV
    material = compound_density(material)
    return material
   
def fluo_int_theo(expt_constant, inc_ang, coating, substr, thickness):
    # angle should be in degrees || thickness in cm
    # calculating exit angle and converting all angles to radians
    exit_ang = 90 - inc_ang
    exit_ang = exit_ang * math.pi / 180
    inc_ang = inc_ang * math.pi / 180
    CS_E0 = 'CS_' + str(E0)
    CS_Ef = 'CS_' + str(Ef)

    expon_fact = -( coating[CS_E0]/math.sin(inc_ang) + coating[CS_Ef]/math.sin(exit_ang) )* coating['density']*thickness
    
    I_f_theo = expt_constant / ( substr['density']*math.sin(inc_ang) ) / ( substr[CS_E0]/math.sin(inc_ang) + substr[CS_Ef]/math.sin(exit_ang) ) * math.exp(expon_fact)

    return I_f_theo
    

thicknesses = [0.1, 0.25, 0.5, 0.6, 7.501e-1, 1]   # values in microns!
print("\tLet's calculate the theoretical fluorescence intensity for these thicknesses (microns):", thicknesses)
thicknesses = np.multiply(thicknesses, 1e-4)

inc_angles = [5, 10, 15, 20, 25, 30, 35, 40, 45, 60]
print("\t...for these incidence angles (deg):", inc_angles)
print('\n')

print('\tInitialising substrate...')
SS = simulate_material(SS)

print('\n\tInitialising samples...')
for key in sample.keys():
    print(key)
    sample[key] = simulate_material(sample[key])

    theory = {}

    for t in thicknesses:
        point = str(t*1e4)
        theory[point] = []
        for angle in inc_angles:    
            theory[point].append(fluo_int_theo(expt_constant, angle, sample[key], SS, t))

    plt.xlabel('Incidence angles (deg)')
    plt.ylabel('I_fluo_theo (arb. units)')
    plt.title('Expected Fe K_a fluorescence for sample {0}'.format(key))    
    plt.grid()

    for t in theory.keys():
        legend_name = np.round(float(t),2)
        legend_name = str(legend_name)
        
        plt.plot(inc_angles, theory[t], label = legend_name + ' um')

    key = 'data_' + key
    try:
        plt.scatter(exp_inc_angles, exp_data[key], label = key[5:])
    except KeyError:
        print('Exp data not found')
    plt.legend()
    namefile = key[5:] + '.png'
    plt.savefig(namefile)
    plt.close()

print(' END ')
